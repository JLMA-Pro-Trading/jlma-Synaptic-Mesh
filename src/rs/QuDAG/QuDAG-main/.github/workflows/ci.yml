name: CI

on:
  push:
    branches: [main, develop, quadag-exchange, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  RUST_LOG: debug

jobs:
  # Format and lint checks
  lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --all-features --workspace -- -D warnings

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        
      - name: Check for known vulnerabilities
        run: cargo audit --deny warnings

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
            
      - name: Install test dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          
      - name: Run tests
        run: |
          cargo test --workspace --all-features
          cargo test --workspace --all-features --release
        env:
          RUST_MIN_STACK: 8388608  # 8MB stack for quantum crypto operations
          
      - name: Run doc tests
        run: cargo test --doc --workspace

  # Quantum cryptography tests
  quantum-crypto-tests:
    name: Quantum Crypto Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run quantum crypto tests
        run: |
          cd core/crypto
          cargo test --features "ml-dsa ml-kem hqc" -- --test-threads=1
          cargo test security -- --nocapture
          cargo test timing -- --ignored --nocapture
          
      - name: Test NIST vectors
        run: |
          cd core/crypto
          cargo test nist_test_vectors -- --nocapture

  # DAG consensus tests
  dag-consensus-tests:
    name: DAG Consensus Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run consensus tests
        run: |
          cd core/dag
          cargo test qr_avalanche -- --nocapture
          cargo test byzantine -- --nocapture
          cargo test consensus_performance -- --nocapture

  # Network and P2P tests
  network-tests:
    name: Network Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run network tests
        run: |
          cd core/network
          cargo test onion_routing -- --nocapture
          cargo test nat_traversal -- --nocapture
          cargo test traffic_obfuscation -- --nocapture
          cargo test dark_addressing -- --nocapture

  # Build binaries
  build:
    name: Build Binaries
    needs: [lint, test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: qudag-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: qudag-linux-arm64
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: qudag-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: qudag-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: qudag-windows-amd64.exe
            
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation tool
        if: matrix.use_cross
        run: cargo install cross
        
      - name: Build release binary
        run: |
          ${{ matrix.use_cross && 'cross' || 'cargo' }} build --release --target ${{ matrix.target }} --features "cli full"
          
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/qudag* artifacts/${{ matrix.artifact_name }} || true
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/*

  # WASM builds
  wasm-build:
    name: WASM Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
      - name: Cache WASM builds
        uses: actions/cache@v3
        with:
          path: |
            qudag-wasm/pkg
            qudag-wasm/pkg-nodejs
            qudag-wasm/pkg-bundler
          key: ${{ runner.os }}-wasm-${{ hashFiles('qudag-wasm/Cargo.toml') }}
          
      - name: Build WASM for web
        run: |
          cd qudag-wasm
          wasm-pack build --target web --out-dir pkg
          
      - name: Build WASM for Node.js
        run: |
          cd qudag-wasm
          wasm-pack build --target nodejs --out-dir pkg-nodejs
          
      - name: Build WASM for bundlers
        run: |
          cd qudag-wasm
          wasm-pack build --target bundler --out-dir pkg-bundler
          
      - name: Test WASM in Node.js
        run: |
          cd qudag-wasm
          npm install
          node test-nodejs.mjs
          
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-packages
          path: |
            qudag-wasm/pkg
            qudag-wasm/pkg-nodejs
            qudag-wasm/pkg-bundler

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run benchmarks
        run: |
          cargo bench --workspace --features bench > benchmark_results.txt
          
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: benchmark_results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Test coverage
  coverage:
    name: Code Coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
        
      - name: Generate coverage report
        run: |
          cargo tarpaulin --workspace --all-features --out Xml --output-dir coverage
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          flags: unittests
          name: codecov-umbrella

  # Docker build
  docker:
    name: Docker Build
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            qudag/node:latest
            qudag/node:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration test with multi-node setup
  integration:
    name: Integration Tests
    needs: [build, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up test network
        run: |
          cd qudag-testnet
          docker-compose up -d
          ./scripts/monitor-nodes.sh --wait-ready
          
      - name: Run integration tests
        run: |
          cd tests/integration
          cargo test --features integration
          
      - name: Collect logs
        if: always()
        run: |
          cd qudag-testnet
          docker-compose logs > integration_logs.txt
          
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-logs
          path: qudag-testnet/integration_logs.txt
          
      - name: Tear down test network
        if: always()
        run: |
          cd qudag-testnet
          docker-compose down -v