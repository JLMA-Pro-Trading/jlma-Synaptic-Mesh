# Multi-stage Dockerfile for DAA SDK - Alpine variant
# This creates a minimal production image with Alpine Linux

# Build stage
FROM rust:1.75-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    sqlite-dev \
    sqlite-static

# Set working directory
WORKDIR /app

# Copy workspace configuration
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/

# Copy all crate sources
COPY daa-*/ ./
COPY src/ ./src/

# Build with static linking for Alpine
ENV RUSTFLAGS="-C target-feature=-crt-static"
RUN cargo build --release --workspace

# Runtime stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl \
    && adduser -D -s /bin/sh -h /app daa

# Copy binaries from builder
COPY --from=builder --chown=daa:daa /app/target/release/daa-cli /usr/local/bin/
COPY --from=builder --chown=daa:daa /app/target/release/daa-orchestrator /usr/local/bin/
COPY --from=builder --chown=daa:daa /app/target/release/daa-mcp-server /usr/local/bin/

# Create app directory structure
RUN mkdir -p /app/data /app/logs /app/config \
    && chown -R daa:daa /app

# Switch to non-root user
USER daa
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["daa-orchestrator"]

# Metadata
LABEL org.opencontainers.image.title="DAA SDK Alpine"
LABEL org.opencontainers.image.description="Decentralized Autonomous Architecture SDK - Alpine Linux"
LABEL org.opencontainers.image.vendor="DAA Team"
LABEL org.opencontainers.image.source="https://github.com/daa-hq/daa-sdk"