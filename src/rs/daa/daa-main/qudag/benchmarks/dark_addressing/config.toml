# Dark Addressing Benchmark Configuration

[general]
# Number of benchmark iterations
sample_size = 100
# Measurement time per benchmark in seconds
measurement_time = 10
# Warm-up time before measurements in seconds
warmup_time = 2
# Output format: "json", "csv", "html"
output_format = "html"
# Output directory for benchmark results
output_dir = "./results"

[dark_domain]
# Test different numbers of registered domains
domain_counts = [10, 100, 1000, 10000, 100000]
# Domain name patterns to test
domain_patterns = [
    "test{}.dark",
    "long-domain-name-{}.dark", 
    "unicode-测试-{}.dark",
    "subdomain.test{}.dark"
]
# Concurrent access test configuration
max_concurrent_readers = 50
max_concurrent_writers = 10

[shadow_routing]
# Message sizes to test (in bytes)
message_sizes = [128, 1024, 8192, 65536, 1048576]
# Number of onion routing layers to test
onion_layers = [1, 3, 5, 7, 10]
# Number of routing table entries for scaling tests
routing_table_sizes = [100, 1000, 10000, 100000]
# Hop counts for multi-hop routing
hop_counts = [1, 2, 3, 5, 8]

[quantum_fingerprint]
# Data sizes for fingerprint generation tests (in bytes)
data_sizes = [64, 256, 1024, 4096, 16384, 65536, 262144]
# Batch sizes for batch verification tests
batch_sizes = [10, 50, 100, 500, 1000]
# Number of concurrent operations
concurrent_operations = [1, 2, 4, 8, 16, 32]
# Enable compact fingerprint tests
test_compact = true

[dns_resolution]
# Cache sizes to test
cache_sizes = [100, 1000, 10000, 100000]
# Simulated upstream latencies (in milliseconds)
upstream_latencies = [1, 10, 50, 100, 500, 1000]
# Number of fallback servers to test
fallback_servers = [1, 2, 3, 5]
# TTL values to test (in seconds)
ttl_values = [60, 300, 3600, 86400]

[performance_targets]
# Performance targets for regression testing

[performance_targets.dark_domain]
# Maximum time for domain registration (microseconds)
max_registration_time = 100
# Maximum time for domain lookup (microseconds)  
max_lookup_time = 50
# Maximum time for address resolution (microseconds)
max_resolution_time = 500

[performance_targets.shadow_routing]
# Maximum time for address generation (microseconds)
max_address_generation = 200
# Maximum time per routing hop (microseconds)
max_routing_hop_time = 100
# Maximum onion layer overhead (microseconds)
max_onion_overhead = 50

[performance_targets.quantum_fingerprint]
# Maximum time per KB for fingerprint generation (microseconds)
max_generation_per_kb = 500
# Maximum time for fingerprint verification (microseconds)
max_verification_time = 300
# Maximum batch verification overhead (percent)
max_batch_overhead = 10

[performance_targets.dns_resolution]
# Maximum cache hit time (microseconds)
max_cache_hit_time = 20
# Maximum cache miss overhead vs upstream (percent)
max_cache_miss_overhead = 5

[security]
# Security-related benchmark configuration

# Test timing attack resistance
test_timing_attacks = true
# Number of timing samples for constant-time verification
timing_samples = 10000
# Maximum allowed timing variance (percent)
max_timing_variance = 5

# Test side-channel resistance
test_side_channels = true
# Power analysis simulation
test_power_analysis = false

[reporting]
# Benchmark reporting configuration

# Generate detailed performance profiles
detailed_profiles = true
# Include memory usage statistics
include_memory_stats = true
# Generate comparison charts
generate_charts = true
# Include security analysis
include_security_analysis = true

# Benchmark comparison baselines
baseline_file = "baselines/v0.1.0.json"
# Regression threshold (percent performance decrease)
regression_threshold = 10

[advanced]
# Advanced benchmark configuration

# Enable CPU governor control
control_cpu_governor = false
# Desired CPU governor for benchmarks
cpu_governor = "performance"

# Enable memory prefault
prefault_memory = true
# Memory allocation patterns to test
memory_patterns = ["sequential", "random", "mixed"]

# Enable NUMA awareness testing
test_numa = false
# CPU affinity for benchmark threads
cpu_affinity = [0, 1, 2, 3]