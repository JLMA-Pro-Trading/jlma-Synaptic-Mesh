name: Compatibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - extended
        - full

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick compatibility check for basic platforms
  basic-compatibility:
    name: Basic Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index  
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Test workspace
      run: cargo test --workspace --verbose

    - name: Test with all features
      run: cargo test --workspace --all-features --verbose

    - name: Test with no default features
      run: cargo test --workspace --no-default-features --verbose
      continue-on-error: true

  # Extended compatibility testing for more Rust versions
  rust-versions:
    name: Rust Version Compatibility
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope != 'basic' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        rust: ["1.70.0", "1.75.0", "1.80.0", stable, beta, nightly]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build workspace
      run: cargo build --workspace
      continue-on-error: ${{ matrix.rust == 'nightly' }}

    - name: Test workspace
      run: cargo test --workspace
      continue-on-error: ${{ matrix.rust == 'nightly' }}

    - name: Test crypto module (critical)
      run: cargo test -p qudag-crypto
      continue-on-error: ${{ matrix.rust == 'nightly' }}

  # Cross-compilation testing
  cross-compilation:
    name: Cross Compilation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - wasm32-unknown-unknown

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-cross-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Check crypto compilation
      run: cargo check -p qudag-crypto --target ${{ matrix.target }}
      continue-on-error: ${{ matrix.target == 'wasm32-unknown-unknown' }}

    - name: Check DAG compilation  
      run: cargo check -p qudag-dag --target ${{ matrix.target }}
      continue-on-error: ${{ matrix.target == 'wasm32-unknown-unknown' }}

    - name: Check network compilation (skip WASM)
      if: matrix.target != 'wasm32-unknown-unknown'
      run: cargo check -p qudag-network --target ${{ matrix.target }}

  # Feature flag combinations
  feature-combinations:
    name: Feature Combinations
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope != 'basic' || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        crate: [qudag-crypto, qudag-dag, qudag-network]
        features:
          - ""
          - "--no-default-features"
          - "--all-features"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target  
        key: ${{ runner.os }}-cargo-features-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with feature combination
      run: cargo test -p ${{ matrix.crate }} ${{ matrix.features }}
      continue-on-error: true

  # Security-hardened compilation
  security-flags:
    name: Security Hardened Compilation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with overflow checks
      run: RUSTFLAGS="-C overflow-checks=on" cargo test -p qudag-crypto

    - name: Test with debug assertions
      run: RUSTFLAGS="-C debug-assertions=on" cargo test -p qudag-crypto

    - name: Test with warnings as errors
      run: RUSTFLAGS="-D warnings" cargo check --workspace

    - name: Test with panic=abort
      run: RUSTFLAGS="-C panic=abort" cargo build -p qudag-crypto

  # Documentation and benchmarks
  docs-and-benchmarks:
    name: Documentation and Benchmarks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate documentation
      run: cargo doc --workspace --no-deps --all-features

    - name: Check documentation links
      run: cargo doc --workspace --no-deps --all-features
      env:
        RUSTDOCFLAGS: "-D broken_intra_doc_links"

    - name: Compile benchmarks
      run: |
        cargo bench --workspace --no-run
      continue-on-error: true

  # Minimal versions testing (nightly only)
  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-minimal-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with minimal versions
      run: cargo +nightly build -Z minimal-versions
      continue-on-error: true

  # Comprehensive test report
  compatibility-report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [basic-compatibility, rust-versions, cross-compilation, feature-combinations]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install toml

    - name: Run comprehensive compatibility test (quick)
      run: |
        # Run a subset of tests for CI
        ./scripts/compatibility_test.sh features
        ./scripts/compatibility_test.sh docs
      continue-on-error: true

    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compatibility-report
        path: |
          compatibility_report.json
          target/doc/