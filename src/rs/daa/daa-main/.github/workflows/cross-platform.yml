name: Cross-Platform Builds

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-matrix:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
            
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
            
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
            
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            cross: false
            
          # Additional targets
          - target: wasm32-unknown-unknown
            os: ubuntu-latest
            cross: true
            
          - target: wasm32-wasi
            os: ubuntu-latest
            cross: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross
      if: matrix.cross
      uses: taiki-e/install-action@cross

    - name: Setup musl tools
      if: contains(matrix.target, 'musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build workspace (native)
      if: '!matrix.cross'
      run: |
        cargo build --workspace --target ${{ matrix.target }} --verbose

    - name: Build workspace (cross)
      if: matrix.cross && !contains(matrix.target, 'wasm')
      run: |
        cross build --workspace --target ${{ matrix.target }} --verbose

    - name: Build for WASM
      if: contains(matrix.target, 'wasm')
      run: |
        # Only build specific crates that support WASM
        cargo build --package daa-rules --target ${{ matrix.target }} --verbose
        cargo build --package daa-chain --target ${{ matrix.target }} --verbose

    - name: Run tests (native only)
      if: '!matrix.cross && !contains(matrix.target, ''wasm'')'
      run: |
        cargo test --workspace --target ${{ matrix.target }} --verbose

    - name: Build CLI binary
      if: '!contains(matrix.target, ''wasm'')'
      run: |
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --package daa-cli --target ${{ matrix.target }} --release
        else
          cargo build --package daa-cli --target ${{ matrix.target }} --release
        fi

    - name: Test CLI binary (native only)
      if: '!matrix.cross && !contains(matrix.target, ''wasm'')'
      run: |
        ./target/${{ matrix.target }}/release/daa-cli --version
        ./target/${{ matrix.target }}/release/daa-cli --help

    - name: Prepare artifacts
      if: '!contains(matrix.target, ''wasm'')'
      run: |
        mkdir -p artifacts
        
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp target/${{ matrix.target }}/release/daa-cli.exe artifacts/daa-cli-${{ matrix.target }}.exe
        else
          cp target/${{ matrix.target }}/release/daa-cli artifacts/daa-cli-${{ matrix.target }}
        fi

    - name: Upload artifacts
      if: '!contains(matrix.target, ''wasm'')'
      uses: actions/upload-artifact@v3
      with:
        name: daa-cli-${{ matrix.target }}
        path: artifacts/*

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          daasdk/daa-cli
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-alpine:
    name: Alpine Linux Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    container:
      image: alpine:latest
    
    steps:
    - name: Install dependencies
      run: |
        apk add --no-cache \
          build-base \
          curl \
          git \
          openssl-dev \
          pkgconfig

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Build on Alpine
      run: |
        source ~/.cargo/env
        cargo build --workspace --release

    - name: Test on Alpine
      run: |
        source ~/.cargo/env
        cargo test --workspace

    - name: Create Alpine artifact
      run: |
        mkdir -p artifacts
        cp target/release/daa-cli artifacts/daa-cli-alpine-x86_64

    - name: Upload Alpine artifact
      uses: actions/upload-artifact@v3
      with:
        name: daa-cli-alpine-x86_64
        path: artifacts/daa-cli-alpine-x86_64

  test-compatibility:
    name: Compatibility Tests
    needs: build-matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, macos-12, macos-13, windows-2019, windows-2022]
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: daa-cli-${{ matrix.os == 'ubuntu-20.04' && 'x86_64-unknown-linux-gnu' || matrix.os == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || matrix.os == 'macos-12' && 'x86_64-apple-darwin' || matrix.os == 'macos-13' && 'x86_64-apple-darwin' || matrix.os == 'windows-2019' && 'x86_64-pc-windows-msvc' || 'x86_64-pc-windows-msvc' }}

    - name: Test binary compatibility
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          chmod +x daa-cli-*.exe
          ./daa-cli-*.exe --version
          ./daa-cli-*.exe --help
        else
          chmod +x daa-cli-*
          ./daa-cli-* --version
          ./daa-cli-* --help
        fi

  performance-benchmarks:
    name: Cross-Platform Benchmarks
    needs: build-matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: bench-${{ matrix.os }}

    - name: Run benchmarks
      run: |
        cargo bench --workspace

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks-${{ matrix.os }}
        path: target/criterion/

  summary:
    name: Cross-Platform Summary
    needs: [build-matrix, build-docker-images, build-alpine, test-compatibility]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "Build Matrix: ${{ needs.build-matrix.result }}"
        echo "Docker Images: ${{ needs.build-docker-images.result }}"
        echo "Alpine Build: ${{ needs.build-alpine.result }}"
        echo "Compatibility: ${{ needs.test-compatibility.result }}"
        
        if [[ "${{ needs.build-matrix.result }}" != "success" ]]; then
          echo "❌ Build matrix failed"
          exit 1
        fi
        
        if [[ "${{ needs.build-docker-images.result }}" != "success" && "${{ needs.build-docker-images.result }}" != "skipped" ]]; then
          echo "❌ Docker build failed"
          exit 1
        fi
        
        if [[ "${{ needs.build-alpine.result }}" != "success" ]]; then
          echo "❌ Alpine build failed"
          exit 1
        fi
        
        if [[ "${{ needs.test-compatibility.result }}" != "success" ]]; then
          echo "❌ Compatibility tests failed"
          exit 1
        fi
        
        echo "✅ All cross-platform builds successful"