// TypeScript definitions for DAA Compute WASM
// Auto-generated by wasm-pack and enhanced with additional types

export interface BrowserTrainingConfig {
    max_train_time_ms: number;
    batch_size: number;
    use_simd: boolean;
    memory_limit_mb: number;
}

export interface InferenceConfig {
    max_batch_size: number;
    use_webgl: boolean;
    use_webgpu: boolean;
    cache_in_indexeddb: boolean;
    max_inference_time_ms: number;
}

export interface ModelMetadata {
    name: string;
    version: string;
    input_shape: number[];
    output_shape: number[];
    quantization: 'None' | 'Int8' | 'Int4' | 'Dynamic';
}

export interface TrainingResult {
    processed_samples: number;
    average_loss: number;
    time_ms: number;
}

export interface SystemCapabilities {
    hardware_concurrency: number;
    device_memory: number;
    simd_available: boolean;
    webgl_available: boolean;
    webgpu_available: boolean;
}

export interface InferenceCapabilities {
    webgl: boolean;
    webgl2: boolean;
    webgpu: boolean;
    wasm_simd: boolean;
    indexeddb: boolean;
}

export interface BenchmarkResult {
    input_size: number;
    layers: number;
    time_ms: number;
    throughput_ops_per_sec: number;
}

/**
 * Browser-based AI training using WebAssembly
 */
export class BrowserTrainer {
    constructor(config: string);
    
    /**
     * Train on a batch of data
     * @param inputs Float32Array of input data
     * @param targets Float32Array of target values
     * @returns Promise<string> JSON string with training results
     */
    train_batch(inputs: Float32Array, targets: Float32Array): Promise<string>;
    
    /**
     * Get compressed gradients for P2P sharing
     * @returns Uint8Array Compressed gradient data
     */
    get_gradients(): Uint8Array;
    
    /**
     * Apply gradients received from peers
     * @param compressed_gradients Uint8Array Gradient data from other peers
     */
    apply_gradients(compressed_gradients: Uint8Array): void;
}

/**
 * Browser-based inference engine
 */
export class BrowserInference {
    constructor(config?: string);
    
    /**
     * Load a model for inference
     * @param model_data Uint8Array Model weights and structure
     * @param metadata_json string JSON metadata about the model
     * @returns Promise<string> Model ID for future inference calls
     */
    load_model(model_data: Uint8Array, metadata_json: string): Promise<string>;
    
    /**
     * Run inference on input data
     * @param model_id string ID of the loaded model
     * @param input_data Float32Array Input tensor data
     * @returns Promise<Float32Array> Output predictions
     */
    infer(model_id: string, input_data: Float32Array): Promise<Float32Array>;
    
    /**
     * Get information about a loaded model
     * @param model_id string Model identifier
     * @returns string JSON with model information
     */
    get_model_info(model_id: string): string;
    
    /**
     * Clear the model cache
     */
    clear_cache(): void;
}

/**
 * Initialize WASM training module
 */
export function init_wasm_training(): void;

/**
 * Get browser capabilities for adaptive training
 * @returns string JSON with system capabilities
 */
export function get_browser_capabilities(): string;

/**
 * Get inference engine capabilities
 * @returns string JSON with inference capabilities
 */
export function get_inference_capabilities(): string;

/**
 * Benchmark inference performance
 * @param size number Input size for benchmark
 * @returns Promise<string> JSON with benchmark results
 */
export function benchmark_inference(size: number): Promise<string>;

/**
 * P2P Network Types for browser integration
 */
export interface P2PConfig {
    local_peer_id?: string;
    listen_addresses: string[];
    bootstrap_nodes: Array<[string, string]>;
    enable_mdns: boolean;
    enable_nat_traversal: boolean;
    enable_relay: boolean;
    compression_level: number;
}

export interface GradientMessage {
    peer_id: string;
    round: number;
    compressed_gradient: Uint8Array;
    timestamp: number;
}

/**
 * Helper functions for TypeScript integration
 */
export namespace Utils {
    /**
     * Convert JavaScript arrays to appropriate WASM types
     */
    export function toFloat32Array(data: number[]): Float32Array;
    export function toUint8Array(data: number[]): Uint8Array;
    
    /**
     * Parse JSON responses from WASM functions
     */
    export function parseTrainingResult(json: string): TrainingResult;
    export function parseCapabilities(json: string): SystemCapabilities;
    export function parseBenchmark(json: string): BenchmarkResult;
    
    /**
     * Validate configurations before passing to WASM
     */
    export function validateTrainingConfig(config: BrowserTrainingConfig): boolean;
    export function validateInferenceConfig(config: InferenceConfig): boolean;
}

/**
 * Integration helpers for popular frameworks
 */
export namespace Integrations {
    /**
     * TensorFlow.js integration helpers
     */
    export namespace TensorFlow {
        export function fromTensor(tensor: any): Float32Array;
        export function toTensor(data: Float32Array, shape: number[]): any;
    }
    
    /**
     * ONNX.js integration helpers
     */
    export namespace ONNX {
        export function convertModel(model: any): Promise<Uint8Array>;
        export function extractMetadata(model: any): ModelMetadata;
    }
}

// Module augmentation for global availability
declare global {
    interface Window {
        DAACompute?: {
            BrowserTrainer: typeof BrowserTrainer;
            BrowserInference: typeof BrowserInference;
            Utils: typeof Utils;
            Integrations: typeof Integrations;
        };
    }
}

export default {
    BrowserTrainer,
    BrowserInference,
    Utils,
    Integrations,
    init_wasm_training,
    get_browser_capabilities,
    get_inference_capabilities,
    benchmark_inference,
};