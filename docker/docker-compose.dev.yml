# Development Docker Compose for Synaptic Neural Mesh
# Optimized for development with hot reload and debugging

version: '3.8'

services:
  # ==============================================================================
  # Development Neural Mesh Node
  # ==============================================================================
  
  neural-mesh-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: neural-mesh-dev
    hostname: neural-mesh-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NODE_ID=neural-dev-node
      - RUST_LOG=debug,qudag=trace,neural_mesh=trace
      - RUST_BACKTRACE=full
      - QUDAG_P2P_PORT=4001
      - QUDAG_RPC_PORT=8080
      - NEURAL_API_PORT=8081
      - MCP_PORT=3000
      - DEBUG=*
    ports:
      - "4001:4001"   # P2P QuDAG
      - "8080:8080"   # QuDAG RPC
      - "8081:8081"   # Neural Mesh API
      - "3000:3000"   # MCP Server
      - "9229:9229"   # Node.js Debug
      - "5005:5005"   # Rust Debug
    volumes:
      # Hot reload sources
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
      
      # Development data (persistent)
      - neural-dev-data:/app/data
      - neural-dev-logs:/app/logs
      
      # Node modules cache
      - neural-dev-node-modules:/app/node_modules
      
      # Rust target cache
      - neural-dev-rust-target:/app/target
    networks:
      neural-mesh-dev:
        ipv4_address: 172.26.0.10
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================================================
  # Development Database (Lightweight)
  # ==============================================================================
  
  dev-redis:
    image: redis:7.2-alpine
    container_name: neural-mesh-dev-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --save ""
    ports:
      - "6380:6379"
    volumes:
      - dev-redis-data:/data
    networks:
      - neural-mesh-dev

  dev-postgres:
    image: postgres:16-alpine
    container_name: neural-mesh-dev-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=neural_mesh_dev
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=dev
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5433:5432"
    volumes:
      - dev-postgres-data:/var/lib/postgresql/data
      - ./sql/dev-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - neural-mesh-dev

  # ==============================================================================
  # Development Monitoring (Lightweight)
  # ==============================================================================
  
  dev-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: neural-mesh-dev-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    ports:
      - "9094:9090"
    volumes:
      - ./monitoring/dev-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - dev-prometheus-data:/prometheus
    networks:
      - neural-mesh-dev
    depends_on:
      - neural-mesh-dev

  dev-grafana:
    image: grafana/grafana:10.1.0
    container_name: neural-mesh-dev-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Editor
    ports:
      - "3002:3000"
    volumes:
      - ./monitoring/grafana/dev-provisioning:/etc/grafana/provisioning:ro
      - dev-grafana-data:/var/lib/grafana
    networks:
      - neural-mesh-dev
    depends_on:
      - dev-prometheus

  # ==============================================================================
  # Development Tools and Testing
  # ==============================================================================
  
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: neural-mesh-test-runner
    environment:
      - NODE_ENV=test
      - TEST_ENDPOINT=http://neural-mesh-dev:8080
      - MCP_ENDPOINT=http://neural-mesh-dev:3000
    volumes:
      - ./tests:/app/tests:ro
      - ./src:/app/src:ro
      - test-results:/app/results
    networks:
      - neural-mesh-dev
    depends_on:
      - neural-mesh-dev
    profiles:
      - testing
    command: ["npm", "test"]

  benchmark-runner:
    build:
      context: .
      dockerfile: Dockerfile.benchmark
    container_name: neural-mesh-benchmark
    environment:
      - NODE_ENV=benchmark
      - BENCHMARK_TARGET=http://neural-mesh-dev:8080
      - BENCHMARK_DURATION=60s
      - BENCHMARK_CONNECTIONS=100
    volumes:
      - ./benchmarks:/app/benchmarks:ro
      - benchmark-results:/app/results
    networks:
      - neural-mesh-dev
    depends_on:
      - neural-mesh-dev
    profiles:
      - benchmarking
    command: ["npm", "run", "benchmark"]

  # ==============================================================================
  # Hot Reload File Watcher
  # ==============================================================================
  
  file-watcher:
    image: node:20-alpine
    container_name: neural-mesh-file-watcher
    working_dir: /app
    command: >
      sh -c "
        npm install -g nodemon &&
        nodemon --watch /app/src --ext js,ts,rs,toml --exec 'echo File changed, triggering reload...' --delay 2
      "
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
    networks:
      - neural-mesh-dev
    profiles:
      - development

networks:
  neural-mesh-dev:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.26.0.0/16
          gateway: 172.26.0.1
    driver_opts:
      com.docker.network.bridge.name: neural-mesh-dev-br

volumes:
  # Development data
  neural-dev-data:
  neural-dev-logs:
  neural-dev-node-modules:
  neural-dev-rust-target:
  
  # Development databases
  dev-redis-data:
  dev-postgres-data:
  
  # Development monitoring
  dev-prometheus-data:
  dev-grafana-data:
  
  # Testing and benchmarking
  test-results:
  benchmark-results: